/*! For license information please see exafs-bundle.js.LICENSE.txt */
var ExaFS;(()=>{"use strict";var e={169:(e,t,i)=>{i.r(t),i.d(t,{Alert:()=>Tt,Button:()=>At,Carousel:()=>jt,Collapse:()=>zt,Dropdown:()=>di,Modal:()=>Si,Offcanvas:()=>qi,Popover:()=>hn,ScrollSpy:()=>vn,Tab:()=>Pn,Toast:()=>Fn,Tooltip:()=>cn});var n={};i.r(n),i.d(n,{afterMain:()=>E,afterRead:()=>y,afterWrite:()=>C,applyStyles:()=>S,arrow:()=>Q,auto:()=>l,basePlacements:()=>c,beforeMain:()=>w,beforeRead:()=>v,beforeWrite:()=>A,bottom:()=>o,clippingParents:()=>h,computeStyles:()=>te,createPopper:()=>Le,createPopperBase:()=>xe,createPopperLite:()=>Ne,detectOverflow:()=>ge,end:()=>u,eventListeners:()=>ne,flip:()=>_e,hide:()=>ye,left:()=>a,main:()=>T,modifierPhases:()=>O,offset:()=>we,placements:()=>_,popper:()=>f,popperGenerator:()=>Pe,popperOffsets:()=>Te,preventOverflow:()=>Ee,read:()=>b,reference:()=>m,right:()=>r,start:()=>d,top:()=>s,variationPlacements:()=>g,viewport:()=>p,write:()=>I});var s="top",o="bottom",r="right",a="left",l="auto",c=[s,o,r,a],d="start",u="end",h="clippingParents",p="viewport",f="popper",m="reference",g=c.reduce((function(e,t){return e.concat([t+"-"+d,t+"-"+u])}),[]),_=[].concat(c,[l]).reduce((function(e,t){return e.concat([t,t+"-"+d,t+"-"+u])}),[]),v="beforeRead",b="read",y="afterRead",w="beforeMain",T="main",E="afterMain",A="beforeWrite",I="write",C="afterWrite",O=[v,b,y,w,T,E,A,I,C];function P(e){return e?(e.nodeName||"").toLowerCase():null}function x(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function L(e){return e instanceof x(e).Element||e instanceof Element}function N(e){return e instanceof x(e).HTMLElement||e instanceof HTMLElement}function k(e){return"undefined"!=typeof ShadowRoot&&(e instanceof x(e).ShadowRoot||e instanceof ShadowRoot)}const S={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},n=t.attributes[e]||{},s=t.elements[e];N(s)&&P(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(e){var t=n[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],s=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});N(n)&&P(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};function F(e){return e.split("-")[0]}var D=Math.max,M=Math.min,R=Math.round;function $(e,t){void 0===t&&(t=!1);var i=e.getBoundingClientRect(),n=1,s=1;if(N(e)&&t){var o=e.offsetHeight,r=e.offsetWidth;r>0&&(n=R(i.width)/r||1),o>0&&(s=R(i.height)/o||1)}return{width:i.width/n,height:i.height/s,top:i.top/s,right:i.right/n,bottom:i.bottom/s,left:i.left/n,x:i.left/n,y:i.top/s}}function j(e){var t=$(e),i=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:n}}function H(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&k(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function B(e){return x(e).getComputedStyle(e)}function q(e){return["table","td","th"].indexOf(P(e))>=0}function V(e){return((L(e)?e.ownerDocument:e.document)||window.document).documentElement}function U(e){return"html"===P(e)?e:e.assignedSlot||e.parentNode||(k(e)?e.host:null)||V(e)}function W(e){return N(e)&&"fixed"!==B(e).position?e.offsetParent:null}function z(e){for(var t=x(e),i=W(e);i&&q(i)&&"static"===B(i).position;)i=W(i);return i&&("html"===P(i)||"body"===P(i)&&"static"===B(i).position)?t:i||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&N(e)&&"fixed"===B(e).position)return null;var i=U(e);for(k(i)&&(i=i.host);N(i)&&["html","body"].indexOf(P(i))<0;){var n=B(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(e)||t}function Y(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function G(e,t,i){return D(e,M(t,i))}function K(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function X(e,t){return t.reduce((function(t,i){return t[i]=e,t}),{})}const Q={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,i=e.state,n=e.name,l=e.options,d=i.elements.arrow,u=i.modifiersData.popperOffsets,h=F(i.placement),p=Y(h),f=[a,r].indexOf(h)>=0?"height":"width";if(d&&u){var m=function(e,t){return K("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:X(e,c))}(l.padding,i),g=j(d),_="y"===p?s:a,v="y"===p?o:r,b=i.rects.reference[f]+i.rects.reference[p]-u[p]-i.rects.popper[f],y=u[p]-i.rects.reference[p],w=z(d),T=w?"y"===p?w.clientHeight||0:w.clientWidth||0:0,E=b/2-y/2,A=m[_],I=T-g[f]-m[v],C=T/2-g[f]/2+E,O=G(A,C,I),P=p;i.modifiersData[n]=((t={})[P]=O,t.centerOffset=O-C,t)}},effect:function(e){var t=e.state,i=e.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&H(t.elements.popper,n)&&(t.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Z(e){return e.split("-")[1]}var J={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ee(e){var t,i=e.popper,n=e.popperRect,l=e.placement,c=e.variation,d=e.offsets,h=e.position,p=e.gpuAcceleration,f=e.adaptive,m=e.roundOffsets,g=e.isFixed,_=d.x,v=void 0===_?0:_,b=d.y,y=void 0===b?0:b,w="function"==typeof m?m({x:v,y}):{x:v,y};v=w.x,y=w.y;var T=d.hasOwnProperty("x"),E=d.hasOwnProperty("y"),A=a,I=s,C=window;if(f){var O=z(i),P="clientHeight",L="clientWidth";O===x(i)&&"static"!==B(O=V(i)).position&&"absolute"===h&&(P="scrollHeight",L="scrollWidth"),(l===s||(l===a||l===r)&&c===u)&&(I=o,y-=(g&&O===C&&C.visualViewport?C.visualViewport.height:O[P])-n.height,y*=p?1:-1),l!==a&&(l!==s&&l!==o||c!==u)||(A=r,v-=(g&&O===C&&C.visualViewport?C.visualViewport.width:O[L])-n.width,v*=p?1:-1)}var N,k=Object.assign({position:h},f&&J),S=!0===m?function(e){var t=e.x,i=e.y,n=window.devicePixelRatio||1;return{x:R(t*n)/n||0,y:R(i*n)/n||0}}({x:v,y}):{x:v,y};return v=S.x,y=S.y,p?Object.assign({},k,((N={})[I]=E?"0":"",N[A]=T?"0":"",N.transform=(C.devicePixelRatio||1)<=1?"translate("+v+"px, "+y+"px)":"translate3d("+v+"px, "+y+"px, 0)",N)):Object.assign({},k,((t={})[I]=E?y+"px":"",t[A]=T?v+"px":"",t.transform="",t))}const te={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,i=e.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:F(t.placement),variation:Z(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ee(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ee(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var ie={passive:!0};const ne={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,i=e.instance,n=e.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=x(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&c.forEach((function(e){e.addEventListener("scroll",i.update,ie)})),a&&l.addEventListener("resize",i.update,ie),function(){o&&c.forEach((function(e){e.removeEventListener("scroll",i.update,ie)})),a&&l.removeEventListener("resize",i.update,ie)}},data:{}};var se={left:"right",right:"left",bottom:"top",top:"bottom"};function oe(e){return e.replace(/left|right|bottom|top/g,(function(e){return se[e]}))}var re={start:"end",end:"start"};function ae(e){return e.replace(/start|end/g,(function(e){return re[e]}))}function le(e){var t=x(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ce(e){return $(V(e)).left+le(e).scrollLeft}function de(e){var t=B(e),i=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function ue(e){return["html","body","#document"].indexOf(P(e))>=0?e.ownerDocument.body:N(e)&&de(e)?e:ue(U(e))}function he(e,t){var i;void 0===t&&(t=[]);var n=ue(e),s=n===(null==(i=e.ownerDocument)?void 0:i.body),o=x(n),r=s?[o].concat(o.visualViewport||[],de(n)?n:[]):n,a=t.concat(r);return s?a:a.concat(he(U(r)))}function pe(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function fe(e,t){return t===p?pe(function(e){var t=x(e),i=V(e),n=t.visualViewport,s=i.clientWidth,o=i.clientHeight,r=0,a=0;return n&&(s=n.width,o=n.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=n.offsetLeft,a=n.offsetTop)),{width:s,height:o,x:r+ce(e),y:a}}(e)):L(t)?function(e){var t=$(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):pe(function(e){var t,i=V(e),n=le(e),s=null==(t=e.ownerDocument)?void 0:t.body,o=D(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=D(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+ce(e),l=-n.scrollTop;return"rtl"===B(s||i).direction&&(a+=D(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(V(e)))}function me(e){var t,i=e.reference,n=e.element,l=e.placement,c=l?F(l):null,h=l?Z(l):null,p=i.x+i.width/2-n.width/2,f=i.y+i.height/2-n.height/2;switch(c){case s:t={x:p,y:i.y-n.height};break;case o:t={x:p,y:i.y+i.height};break;case r:t={x:i.x+i.width,y:f};break;case a:t={x:i.x-n.width,y:f};break;default:t={x:i.x,y:i.y}}var m=c?Y(c):null;if(null!=m){var g="y"===m?"height":"width";switch(h){case d:t[m]=t[m]-(i[g]/2-n[g]/2);break;case u:t[m]=t[m]+(i[g]/2-n[g]/2)}}return t}function ge(e,t){void 0===t&&(t={});var i=t,n=i.placement,a=void 0===n?e.placement:n,l=i.boundary,d=void 0===l?h:l,u=i.rootBoundary,g=void 0===u?p:u,_=i.elementContext,v=void 0===_?f:_,b=i.altBoundary,y=void 0!==b&&b,w=i.padding,T=void 0===w?0:w,E=K("number"!=typeof T?T:X(T,c)),A=v===f?m:f,I=e.rects.popper,C=e.elements[y?A:v],O=function(e,t,i){var n="clippingParents"===t?function(e){var t=he(U(e)),i=["absolute","fixed"].indexOf(B(e).position)>=0&&N(e)?z(e):e;return L(i)?t.filter((function(e){return L(e)&&H(e,i)&&"body"!==P(e)})):[]}(e):[].concat(t),s=[].concat(n,[i]),o=s[0],r=s.reduce((function(t,i){var n=fe(e,i);return t.top=D(n.top,t.top),t.right=M(n.right,t.right),t.bottom=M(n.bottom,t.bottom),t.left=D(n.left,t.left),t}),fe(e,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}(L(C)?C:C.contextElement||V(e.elements.popper),d,g),x=$(e.elements.reference),k=me({reference:x,element:I,strategy:"absolute",placement:a}),S=pe(Object.assign({},I,k)),F=v===f?S:x,R={top:O.top-F.top+E.top,bottom:F.bottom-O.bottom+E.bottom,left:O.left-F.left+E.left,right:F.right-O.right+E.right},j=e.modifiersData.offset;if(v===f&&j){var q=j[a];Object.keys(R).forEach((function(e){var t=[r,o].indexOf(e)>=0?1:-1,i=[s,o].indexOf(e)>=0?"y":"x";R[e]+=q[i]*t}))}return R}const _e={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name;if(!t.modifiersData[n]._skip){for(var u=i.mainAxis,h=void 0===u||u,p=i.altAxis,f=void 0===p||p,m=i.fallbackPlacements,v=i.padding,b=i.boundary,y=i.rootBoundary,w=i.altBoundary,T=i.flipVariations,E=void 0===T||T,A=i.allowedAutoPlacements,I=t.options.placement,C=F(I),O=m||(C!==I&&E?function(e){if(F(e)===l)return[];var t=oe(e);return[ae(e),t,ae(t)]}(I):[oe(I)]),P=[I].concat(O).reduce((function(e,i){return e.concat(F(i)===l?function(e,t){void 0===t&&(t={});var i=t,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,d=void 0===l?_:l,u=Z(n),h=u?a?g:g.filter((function(e){return Z(e)===u})):c,p=h.filter((function(e){return d.indexOf(e)>=0}));0===p.length&&(p=h);var f=p.reduce((function(t,i){return t[i]=ge(e,{placement:i,boundary:s,rootBoundary:o,padding:r})[F(i)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:i,boundary:b,rootBoundary:y,padding:v,flipVariations:E,allowedAutoPlacements:A}):i)}),[]),x=t.rects.reference,L=t.rects.popper,N=new Map,k=!0,S=P[0],D=0;D<P.length;D++){var M=P[D],R=F(M),$=Z(M)===d,j=[s,o].indexOf(R)>=0,H=j?"width":"height",B=ge(t,{placement:M,boundary:b,rootBoundary:y,altBoundary:w,padding:v}),q=j?$?r:a:$?o:s;x[H]>L[H]&&(q=oe(q));var V=oe(q),U=[];if(h&&U.push(B[R]<=0),f&&U.push(B[q]<=0,B[V]<=0),U.every((function(e){return e}))){S=M,k=!1;break}N.set(M,U)}if(k)for(var W=function(e){var t=P.find((function(t){var i=N.get(t);if(i)return i.slice(0,e).every((function(e){return e}))}));if(t)return S=t,"break"},z=E?3:1;z>0&&"break"!==W(z);z--);t.placement!==S&&(t.modifiersData[n]._skip=!0,t.placement=S,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ve(e,t,i){return void 0===i&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function be(e){return[s,r,o,a].some((function(t){return e[t]>=0}))}const ye={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,i=e.name,n=t.rects.reference,s=t.rects.popper,o=t.modifiersData.preventOverflow,r=ge(t,{elementContext:"reference"}),a=ge(t,{altBoundary:!0}),l=ve(r,n),c=ve(a,s,o),d=be(l),u=be(c);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}},we={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,i=e.options,n=e.name,o=i.offset,l=void 0===o?[0,0]:o,c=_.reduce((function(e,i){return e[i]=function(e,t,i){var n=F(e),o=[a,s].indexOf(n)>=0?-1:1,l="function"==typeof i?i(Object.assign({},t,{placement:e})):i,c=l[0],d=l[1];return c=c||0,d=(d||0)*o,[a,r].indexOf(n)>=0?{x:d,y:c}:{x:c,y:d}}(i,t.rects,l),e}),{}),d=c[t.placement],u=d.x,h=d.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=h),t.modifiersData[n]=c}},Te={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,i=e.name;t.modifiersData[i]=me({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Ee={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name,l=i.mainAxis,c=void 0===l||l,u=i.altAxis,h=void 0!==u&&u,p=i.boundary,f=i.rootBoundary,m=i.altBoundary,g=i.padding,_=i.tether,v=void 0===_||_,b=i.tetherOffset,y=void 0===b?0:b,w=ge(t,{boundary:p,rootBoundary:f,padding:g,altBoundary:m}),T=F(t.placement),E=Z(t.placement),A=!E,I=Y(T),C="x"===I?"y":"x",O=t.modifiersData.popperOffsets,P=t.rects.reference,x=t.rects.popper,L="function"==typeof y?y(Object.assign({},t.rects,{placement:t.placement})):y,N="number"==typeof L?{mainAxis:L,altAxis:L}:Object.assign({mainAxis:0,altAxis:0},L),k=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,S={x:0,y:0};if(O){if(c){var R,$="y"===I?s:a,H="y"===I?o:r,B="y"===I?"height":"width",q=O[I],V=q+w[$],U=q-w[H],W=v?-x[B]/2:0,K=E===d?P[B]:x[B],X=E===d?-x[B]:-P[B],Q=t.elements.arrow,J=v&&Q?j(Q):{width:0,height:0},ee=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=ee[$],ie=ee[H],ne=G(0,P[B],J[B]),se=A?P[B]/2-W-ne-te-N.mainAxis:K-ne-te-N.mainAxis,oe=A?-P[B]/2+W+ne+ie+N.mainAxis:X+ne+ie+N.mainAxis,re=t.elements.arrow&&z(t.elements.arrow),ae=re?"y"===I?re.clientTop||0:re.clientLeft||0:0,le=null!=(R=null==k?void 0:k[I])?R:0,ce=q+oe-le,de=G(v?M(V,q+se-le-ae):V,q,v?D(U,ce):U);O[I]=de,S[I]=de-q}if(h){var ue,he="x"===I?s:a,pe="x"===I?o:r,fe=O[C],me="y"===C?"height":"width",_e=fe+w[he],ve=fe-w[pe],be=-1!==[s,a].indexOf(T),ye=null!=(ue=null==k?void 0:k[C])?ue:0,we=be?_e:fe-P[me]-x[me]-ye+N.altAxis,Te=be?fe+P[me]+x[me]-ye-N.altAxis:ve,Ee=v&&be?function(e,t,i){var n=G(e,t,i);return n>i?i:n}(we,fe,Te):G(v?we:_e,fe,v?Te:ve);O[C]=Ee,S[C]=Ee-fe}t.modifiersData[n]=S}},requiresIfExists:["offset"]};function Ae(e,t,i){void 0===i&&(i=!1);var n,s,o=N(t),r=N(t)&&function(e){var t=e.getBoundingClientRect(),i=R(t.width)/e.offsetWidth||1,n=R(t.height)/e.offsetHeight||1;return 1!==i||1!==n}(t),a=V(t),l=$(e,r),c={scrollLeft:0,scrollTop:0},d={x:0,y:0};return(o||!o&&!i)&&(("body"!==P(t)||de(a))&&(c=(n=t)!==x(n)&&N(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:le(n)),N(t)?((d=$(t,!0)).x+=t.clientLeft,d.y+=t.clientTop):a&&(d.x=ce(a))),{x:l.left+c.scrollLeft-d.x,y:l.top+c.scrollTop-d.y,width:l.width,height:l.height}}function Ie(e){var t=new Map,i=new Set,n=[];function s(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!i.has(e)){var n=t.get(e);n&&s(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){i.has(e.name)||s(e)})),n}var Ce={placement:"bottom",modifiers:[],strategy:"absolute"};function Oe(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Pe(e){void 0===e&&(e={});var t=e,i=t.defaultModifiers,n=void 0===i?[]:i,s=t.defaultOptions,o=void 0===s?Ce:s;return function(e,t,i){void 0===i&&(i=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ce,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(i){var s="function"==typeof i?i(a.options):i;u(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:L(e)?he(e):e.contextElement?he(e.contextElement):[],popper:he(t)};var r,c,h=function(e){var t=Ie(e);return O.reduce((function(e,i){return e.concat(t.filter((function(e){return e.phase===i})))}),[])}((r=[].concat(n,a.options.modifiers),c=r.reduce((function(e,t){var i=e[t.name];return e[t.name]=i?Object.assign({},i,t,{options:Object.assign({},i.options,t.options),data:Object.assign({},i.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=h.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,i=e.options,n=void 0===i?{}:i,s=e.effect;if("function"==typeof s){var o=s({state:a,name:t,instance:d,options:n});l.push(o||function(){})}})),d.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,i=e.popper;if(Oe(t,i)){a.rects={reference:Ae(t,z(i),"fixed"===a.options.strategy),popper:j(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],o=s.fn,r=s.options,l=void 0===r?{}:r,u=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:u,instance:d})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(e){d.forceUpdate(),e(a)}))},function(){return r||(r=new Promise((function(e){Promise.resolve().then((function(){r=void 0,e(s())}))}))),r}),destroy:function(){u(),c=!0}};if(!Oe(e,t))return d;function u(){l.forEach((function(e){return e()})),l=[]}return d.setOptions(i).then((function(e){!c&&i.onFirstUpdate&&i.onFirstUpdate(e)})),d}}var xe=Pe(),Le=Pe({defaultModifiers:[ne,Te,te,S,we,_e,Ee,Q,ye]}),Ne=Pe({defaultModifiers:[ne,Te,te,S]});const ke="transitionend",Se=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let i=e.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),t=i&&"#"!==i?i.trim():null}return t},Fe=e=>{const t=Se(e);return t&&document.querySelector(t)?t:null},De=e=>{const t=Se(e);return t?document.querySelector(t):null},Me=e=>{e.dispatchEvent(new Event(ke))},Re=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),$e=e=>Re(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,je=e=>{if(!Re(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),i=e.closest("details:not([open])");if(!i)return t;if(i!==e){const t=e.closest("summary");if(t&&t.parentNode!==i)return!1;if(null===t)return!1}return t},He=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),Be=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?Be(e.parentNode):null},qe=()=>{},Ve=e=>{e.offsetHeight},Ue=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,We=[],ze=()=>"rtl"===document.documentElement.dir,Ye=e=>{var t;t=()=>{const t=Ue();if(t){const i=e.NAME,n=t.fn[i];t.fn[i]=e.jQueryInterface,t.fn[i].Constructor=e,t.fn[i].noConflict=()=>(t.fn[i]=n,e.jQueryInterface)}},"loading"===document.readyState?(We.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of We)e()})),We.push(t)):t()},Ge=e=>{"function"==typeof e&&e()},Ke=(e,t,i=!0)=>{if(!i)return void Ge(e);const n=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:i}=window.getComputedStyle(e);const n=Number.parseFloat(t),s=Number.parseFloat(i);return n||s?(t=t.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(i))):0})(t)+5;let s=!1;const o=({target:i})=>{i===t&&(s=!0,t.removeEventListener(ke,o),Ge(e))};t.addEventListener(ke,o),setTimeout((()=>{s||Me(t)}),n)},Xe=(e,t,i,n)=>{const s=e.length;let o=e.indexOf(t);return-1===o?!i&&n?e[s-1]:e[0]:(o+=i?1:-1,n&&(o=(o+s)%s),e[Math.max(0,Math.min(o,s-1))])},Qe=/[^.]*(?=\..*)\.|.*/,Ze=/\..*/,Je=/::\d+$/,et={};let tt=1;const it={mouseenter:"mouseover",mouseleave:"mouseout"},nt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function st(e,t){return t&&`${t}::${tt++}`||e.uidEvent||tt++}function ot(e){const t=st(e);return e.uidEvent=t,et[t]=et[t]||{},et[t]}function rt(e,t,i=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===i))}function at(e,t,i){const n="string"==typeof t,s=n?i:t||i;let o=ut(e);return nt.has(o)||(o=e),[n,s,o]}function lt(e,t,i,n,s){if("string"!=typeof t||!e)return;let[o,r,a]=at(t,i,n);if(t in it){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};r=e(r)}const l=ot(e),c=l[a]||(l[a]={}),d=rt(c,r,o?i:null);if(d)return void(d.oneOff=d.oneOff&&s);const u=st(r,t.replace(Qe,"")),h=o?function(e,t,i){return function n(s){const o=e.querySelectorAll(t);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return pt(s,{delegateTarget:r}),n.oneOff&&ht.off(e,s.type,t,i),i.apply(r,[s])}}(e,i,r):function(e,t){return function i(n){return pt(n,{delegateTarget:e}),i.oneOff&&ht.off(e,n.type,t),t.apply(e,[n])}}(e,r);h.delegationSelector=o?i:null,h.callable=r,h.oneOff=s,h.uidEvent=u,c[u]=h,e.addEventListener(a,h,o)}function ct(e,t,i,n,s){const o=rt(t[i],n,s);o&&(e.removeEventListener(i,o,Boolean(s)),delete t[i][o.uidEvent])}function dt(e,t,i,n){const s=t[i]||{};for(const o of Object.keys(s))if(o.includes(n)){const n=s[o];ct(e,t,i,n.callable,n.delegationSelector)}}function ut(e){return e=e.replace(Ze,""),it[e]||e}const ht={on(e,t,i,n){lt(e,t,i,n,!1)},one(e,t,i,n){lt(e,t,i,n,!0)},off(e,t,i,n){if("string"!=typeof t||!e)return;const[s,o,r]=at(t,i,n),a=r!==t,l=ot(e),c=l[r]||{},d=t.startsWith(".");if(void 0===o){if(d)for(const i of Object.keys(l))dt(e,l,i,t.slice(1));for(const i of Object.keys(c)){const n=i.replace(Je,"");if(!a||t.includes(n)){const t=c[i];ct(e,l,r,t.callable,t.delegationSelector)}}}else{if(!Object.keys(c).length)return;ct(e,l,r,o,s?i:null)}},trigger(e,t,i){if("string"!=typeof t||!e)return null;const n=Ue();let s=null,o=!0,r=!0,a=!1;t!==ut(t)&&n&&(s=n.Event(t,i),n(e).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());let l=new Event(t,{bubbles:o,cancelable:!0});return l=pt(l,i),a&&l.preventDefault(),r&&e.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function pt(e,t){for(const[i,n]of Object.entries(t||{}))try{e[i]=n}catch(t){Object.defineProperty(e,i,{configurable:!0,get:()=>n})}return e}const ft=new Map,mt={set(e,t,i){ft.has(e)||ft.set(e,new Map);const n=ft.get(e);n.has(t)||0===n.size?n.set(t,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(e,t)=>ft.has(e)&&ft.get(e).get(t)||null,remove(e,t){if(!ft.has(e))return;const i=ft.get(e);i.delete(t),0===i.size&&ft.delete(e)}};function gt(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function _t(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const vt={setDataAttribute(e,t,i){e.setAttribute(`data-bs-${_t(t)}`,i)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${_t(t)}`)},getDataAttributes(e){if(!e)return{};const t={},i=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),t[i]=gt(e.dataset[n])}return t},getDataAttribute:(e,t)=>gt(e.getAttribute(`data-bs-${_t(t)}`))};class bt{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const i=Re(t)?vt.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...Re(t)?vt.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const n of Object.keys(t)){const s=t[n],o=e[n],r=Re(o)?"element":null==(i=o)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(r))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${r}" but expected type "${s}".`)}var i}}class yt extends bt{constructor(e,t){super(),(e=$e(e))&&(this._element=e,this._config=this._getConfig(t),mt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){mt.remove(this._element,this.constructor.DATA_KEY),ht.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,i=!0){Ke(e,t,i)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return mt.get($e(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.2.0"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const wt=(e,t="hide")=>{const i=`click.dismiss${e.EVENT_KEY}`,n=e.NAME;ht.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),He(this))return;const s=De(this)||this.closest(`.${n}`);e.getOrCreateInstance(s)[t]()}))};class Tt extends yt{static get NAME(){return"alert"}close(){if(ht.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),ht.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=Tt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}wt(Tt,"close"),Ye(Tt);const Et='[data-bs-toggle="button"]';class At extends yt{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=At.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}ht.on(document,"click.bs.button.data-api",Et,(e=>{e.preventDefault();const t=e.target.closest(Et);At.getOrCreateInstance(t).toggle()})),Ye(At);const It={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const i=[];let n=e.parentNode.closest(t);for(;n;)i.push(n),n=n.parentNode.closest(t);return i},prev(e,t){let i=e.previousElementSibling;for(;i;){if(i.matches(t))return[i];i=i.previousElementSibling}return[]},next(e,t){let i=e.nextElementSibling;for(;i;){if(i.matches(t))return[i];i=i.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!He(e)&&je(e)))}},Ct={endCallback:null,leftCallback:null,rightCallback:null},Ot={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class Pt extends bt{constructor(e,t){super(),this._element=e,e&&Pt.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Ct}static get DefaultType(){return Ot}static get NAME(){return"swipe"}dispose(){ht.off(this._element,".bs.swipe")}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),Ge(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&Ge(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(ht.on(this._element,"pointerdown.bs.swipe",(e=>this._start(e))),ht.on(this._element,"pointerup.bs.swipe",(e=>this._end(e))),this._element.classList.add("pointer-event")):(ht.on(this._element,"touchstart.bs.swipe",(e=>this._start(e))),ht.on(this._element,"touchmove.bs.swipe",(e=>this._move(e))),ht.on(this._element,"touchend.bs.swipe",(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const xt="next",Lt="prev",Nt="left",kt="right",St="slid.bs.carousel",Ft="carousel",Dt="active",Mt={ArrowLeft:kt,ArrowRight:Nt},Rt={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},$t={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class jt extends yt{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=It.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Ft&&this.cycle()}static get Default(){return Rt}static get DefaultType(){return $t}static get NAME(){return"carousel"}next(){this._slide(xt)}nextWhenVisible(){!document.hidden&&je(this._element)&&this.next()}prev(){this._slide(Lt)}pause(){this._isSliding&&Me(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?ht.one(this._element,St,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void ht.one(this._element,St,(()=>this.to(e)));const i=this._getItemIndex(this._getActive());if(i===e)return;const n=e>i?xt:Lt;this._slide(n,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&ht.on(this._element,"keydown.bs.carousel",(e=>this._keydown(e))),"hover"===this._config.pause&&(ht.on(this._element,"mouseenter.bs.carousel",(()=>this.pause())),ht.on(this._element,"mouseleave.bs.carousel",(()=>this._maybeEnableCycle()))),this._config.touch&&Pt.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of It.find(".carousel-item img",this._element))ht.on(e,"dragstart.bs.carousel",(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(Nt)),rightCallback:()=>this._slide(this._directionToOrder(kt)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new Pt(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Mt[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=It.findOne(".active",this._indicatorsElement);t.classList.remove(Dt),t.removeAttribute("aria-current");const i=It.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);i&&(i.classList.add(Dt),i.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const i=this._getActive(),n=e===xt,s=t||Xe(this._getItems(),i,n,this._config.wrap);if(s===i)return;const o=this._getItemIndex(s),r=t=>ht.trigger(this._element,t,{relatedTarget:s,direction:this._orderToDirection(e),from:this._getItemIndex(i),to:o});if(r("slide.bs.carousel").defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",c=n?"carousel-item-next":"carousel-item-prev";s.classList.add(c),Ve(s),i.classList.add(l),s.classList.add(l),this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(Dt),i.classList.remove(Dt,c,l),this._isSliding=!1,r(St)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return It.findOne(".active.carousel-item",this._element)}_getItems(){return It.find(".carousel-item",this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return ze()?e===Nt?Lt:xt:e===Nt?xt:Lt}_orderToDirection(e){return ze()?e===Lt?Nt:kt:e===Lt?kt:Nt}static jQueryInterface(e){return this.each((function(){const t=jt.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}ht.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",(function(e){const t=De(this);if(!t||!t.classList.contains(Ft))return;e.preventDefault();const i=jt.getOrCreateInstance(t),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===vt.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),ht.on(window,"load.bs.carousel.data-api",(()=>{const e=It.find('[data-bs-ride="carousel"]');for(const t of e)jt.getOrCreateInstance(t)})),Ye(jt);const Ht="show",Bt="collapse",qt="collapsing",Vt='[data-bs-toggle="collapse"]',Ut={parent:null,toggle:!0},Wt={parent:"(null|element)",toggle:"boolean"};class zt extends yt{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const i=It.find(Vt);for(const e of i){const t=Fe(e),i=It.find(t).filter((e=>e===this._element));null!==t&&i.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ut}static get DefaultType(){return Wt}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>zt.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(ht.trigger(this._element,"show.bs.collapse").defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(Bt),this._element.classList.add(qt),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(qt),this._element.classList.add(Bt,Ht),this._element.style[t]="",ht.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[t]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(ht.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,Ve(this._element),this._element.classList.add(qt),this._element.classList.remove(Bt,Ht);for(const e of this._triggerArray){const t=De(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(qt),this._element.classList.add(Bt),ht.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Ht)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=$e(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Vt);for(const t of e){const e=De(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=It.find(":scope .collapse .collapse",this._config.parent);return It.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const i of e)i.classList.toggle("collapsed",!t),i.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const i=zt.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e]()}}))}}ht.on(document,"click.bs.collapse.data-api",Vt,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=Fe(this),i=It.find(t);for(const e of i)zt.getOrCreateInstance(e,{toggle:!1}).toggle()})),Ye(zt);const Yt="dropdown",Gt="ArrowUp",Kt="ArrowDown",Xt="click.bs.dropdown.data-api",Qt="keydown.bs.dropdown.data-api",Zt="show",Jt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ei=`${Jt}.show`,ti=".dropdown-menu",ii=ze()?"top-end":"top-start",ni=ze()?"top-start":"top-end",si=ze()?"bottom-end":"bottom-start",oi=ze()?"bottom-start":"bottom-end",ri=ze()?"left-start":"right-start",ai=ze()?"right-start":"left-start",li={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},ci={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class di extends yt{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=It.findOne(ti,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return li}static get DefaultType(){return ci}static get NAME(){return Yt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(He(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!ht.trigger(this._element,"show.bs.dropdown",e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))ht.on(e,"mouseover",qe);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Zt),this._element.classList.add(Zt),ht.trigger(this._element,"shown.bs.dropdown",e)}}hide(){if(He(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!ht.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))ht.off(e,"mouseover",qe);this._popper&&this._popper.destroy(),this._menu.classList.remove(Zt),this._element.classList.remove(Zt),this._element.setAttribute("aria-expanded","false"),vt.removeDataAttribute(this._menu,"popper"),ht.trigger(this._element,"hidden.bs.dropdown",e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!Re(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Yt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:Re(this._config.reference)?e=$e(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=Le(e,this._menu,t)}_isShown(){return this._menu.classList.contains(Zt)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return ri;if(e.classList.contains("dropstart"))return ai;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?ni:ii:t?oi:si}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(vt.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const i=It.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>je(e)));i.length&&Xe(i,t,e===Kt,!i.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=di.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=It.find(ei);for(const i of t){const t=di.getInstance(i);if(!t||!1===t._config.autoClose)continue;const n=e.composedPath(),s=n.includes(t._menu);if(n.includes(t._element)||"inside"===t._config.autoClose&&!s||"outside"===t._config.autoClose&&s)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const o={relatedTarget:t._element};"click"===e.type&&(o.clickEvent=e),t._completeHide(o)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),i="Escape"===e.key,n=[Gt,Kt].includes(e.key);if(!n&&!i)return;if(t&&!i)return;e.preventDefault();const s=It.findOne(Jt,e.delegateTarget.parentNode),o=di.getOrCreateInstance(s);if(n)return e.stopPropagation(),o.show(),void o._selectMenuItem(e);o._isShown()&&(e.stopPropagation(),o.hide(),s.focus())}}ht.on(document,Qt,Jt,di.dataApiKeydownHandler),ht.on(document,Qt,ti,di.dataApiKeydownHandler),ht.on(document,Xt,di.clearMenus),ht.on(document,"keyup.bs.dropdown.data-api",di.clearMenus),ht.on(document,Xt,Jt,(function(e){e.preventDefault(),di.getOrCreateInstance(this).toggle()})),Ye(di);const ui=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",hi=".sticky-top",pi="padding-right",fi="margin-right";class mi{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,pi,(t=>t+e)),this._setElementAttributes(ui,pi,(t=>t+e)),this._setElementAttributes(hi,fi,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,pi),this._resetElementAttributes(ui,pi),this._resetElementAttributes(hi,fi)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,i){const n=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+n)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(e,t){const i=e.style.getPropertyValue(t);i&&vt.setDataAttribute(e,t,i)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const i=vt.getDataAttribute(e,t);null!==i?(vt.removeDataAttribute(e,t),e.style.setProperty(t,i)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(Re(e))t(e);else for(const i of It.find(e,this._element))t(i)}}const gi="show",_i="mousedown.bs.backdrop",vi={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},bi={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class yi extends bt{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return vi}static get DefaultType(){return bi}static get NAME(){return"backdrop"}show(e){if(!this._config.isVisible)return void Ge(e);this._append();const t=this._getElement();this._config.isAnimated&&Ve(t),t.classList.add(gi),this._emulateAnimation((()=>{Ge(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(gi),this._emulateAnimation((()=>{this.dispose(),Ge(e)}))):Ge(e)}dispose(){this._isAppended&&(ht.off(this._element,_i),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=$e(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),ht.on(e,_i,(()=>{Ge(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){Ke(e,this._getElement(),this._config.isAnimated)}}const wi=".bs.focustrap",Ti="backward",Ei={autofocus:!0,trapElement:null},Ai={autofocus:"boolean",trapElement:"element"};class Ii extends bt{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Ei}static get DefaultType(){return Ai}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),ht.off(document,wi),ht.on(document,"focusin.bs.focustrap",(e=>this._handleFocusin(e))),ht.on(document,"keydown.tab.bs.focustrap",(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,ht.off(document,wi))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const i=It.focusableChildren(t);0===i.length?t.focus():this._lastTabNavDirection===Ti?i[i.length-1].focus():i[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Ti:"forward")}}const Ci="hidden.bs.modal",Oi="show.bs.modal",Pi="modal-open",xi="show",Li="modal-static",Ni={backdrop:!0,focus:!0,keyboard:!0},ki={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Si extends yt{constructor(e,t){super(e,t),this._dialog=It.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new mi,this._addEventListeners()}static get Default(){return Ni}static get DefaultType(){return ki}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||ht.trigger(this._element,Oi,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Pi),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(ht.trigger(this._element,"hide.bs.modal").defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(xi),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){for(const e of[window,this._dialog])ht.off(e,".bs.modal");this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new yi({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ii({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=It.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),Ve(this._element),this._element.classList.add(xi),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,ht.trigger(this._element,"shown.bs.modal",{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){ht.on(this._element,"keydown.dismiss.bs.modal",(e=>{if("Escape"===e.key)return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),ht.on(window,"resize.bs.modal",(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),ht.on(this._element,"mousedown.dismiss.bs.modal",(e=>{e.target===e.currentTarget&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Pi),this._resetAdjustments(),this._scrollBar.reset(),ht.trigger(this._element,Ci)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(ht.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Li)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Li),this._queueCallback((()=>{this._element.classList.remove(Li),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),i=t>0;if(i&&!e){const e=ze()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!i&&e){const e=ze()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const i=Si.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e](t)}}))}}ht.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(e){const t=De(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),ht.one(t,Oi,(e=>{e.defaultPrevented||ht.one(t,Ci,(()=>{je(this)&&this.focus()}))}));const i=It.findOne(".modal.show");i&&Si.getInstance(i).hide(),Si.getOrCreateInstance(t).toggle(this)})),wt(Si),Ye(Si);const Fi="show",Di="showing",Mi="hiding",Ri=".offcanvas.show",$i="hidePrevented.bs.offcanvas",ji="hidden.bs.offcanvas",Hi={backdrop:!0,keyboard:!0,scroll:!1},Bi={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class qi extends yt{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return Hi}static get DefaultType(){return Bi}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||ht.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new mi).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Di),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Fi),this._element.classList.remove(Di),ht.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(ht.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Mi),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(Fi,Mi),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new mi).reset(),ht.trigger(this._element,ji)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new yi({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():ht.trigger(this._element,$i)}:null})}_initializeFocusTrap(){return new Ii({trapElement:this._element})}_addEventListeners(){ht.on(this._element,"keydown.dismiss.bs.offcanvas",(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():ht.trigger(this._element,$i))}))}static jQueryInterface(e){return this.each((function(){const t=qi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}ht.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(e){const t=De(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),He(this))return;ht.one(t,ji,(()=>{je(this)&&this.focus()}));const i=It.findOne(Ri);i&&i!==t&&qi.getInstance(i).hide(),qi.getOrCreateInstance(t).toggle(this)})),ht.on(window,"load.bs.offcanvas.data-api",(()=>{for(const e of It.find(Ri))qi.getOrCreateInstance(e).show()})),ht.on(window,"resize.bs.offcanvas",(()=>{for(const e of It.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&qi.getOrCreateInstance(e).hide()})),wt(qi),Ye(qi);const Vi=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Ui=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Wi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,zi=(e,t)=>{const i=e.nodeName.toLowerCase();return t.includes(i)?!Vi.has(i)||Boolean(Ui.test(e.nodeValue)||Wi.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(i)))},Yi={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Gi={allowList:Yi,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Ki={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Xi={entry:"(string|element|function|null)",selector:"(string|element)"};class Qi extends bt{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Gi}static get DefaultType(){return Ki}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,i]of Object.entries(this._config.content))this._setContent(e,i,t);const t=e.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&t.classList.add(...i.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,i]of Object.entries(e))super._typeCheckConfig({selector:t,entry:i},Xi)}_setContent(e,t,i){const n=It.findOne(i,e);n&&((t=this._resolvePossibleFunction(t))?Re(t)?this._putElementInTemplate($e(t),n):this._config.html?n.innerHTML=this._maybeSanitize(t):n.textContent=t:n.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,i){if(!e.length)return e;if(i&&"function"==typeof i)return i(e);const n=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const e of s){const i=e.nodeName.toLowerCase();if(!Object.keys(t).includes(i)){e.remove();continue}const n=[].concat(...e.attributes),s=[].concat(t["*"]||[],t[i]||[]);for(const t of n)zi(t,s)||e.removeAttribute(t.nodeName)}return n.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return"function"==typeof e?e(this):e}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const Zi=new Set(["sanitize","allowList","sanitizeFn"]),Ji="fade",en="show",tn=".modal",nn="hide.bs.modal",sn="hover",on="focus",rn={AUTO:"auto",TOP:"top",RIGHT:ze()?"left":"right",BOTTOM:"bottom",LEFT:ze()?"right":"left"},an={allowList:Yi,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},ln={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class cn extends yt{constructor(e,t){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=!1,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners()}static get Default(){return an}static get DefaultType(){return ln}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled){if(e){const t=this._initializeOnDelegatedTarget(e);return t._activeTrigger.click=!t._activeTrigger.click,void(t._isWithActiveTrigger()?t._enter():t._leave())}this._isShown()?this._leave():this._enter()}}dispose(){clearTimeout(this._timeout),ht.off(this._element.closest(tn),nn,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=ht.trigger(this._element,this.constructor.eventName("show")),t=(Be(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this.tip&&(this.tip.remove(),this.tip=null);const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),ht.trigger(this._element,this.constructor.eventName("inserted"))),this._popper?this._popper.update():this._popper=this._createPopper(i),i.classList.add(en),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))ht.on(e,"mouseover",qe);this._queueCallback((()=>{const e=this._isHovered;this._isHovered=!1,ht.trigger(this._element,this.constructor.eventName("shown")),e&&this._leave()}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(ht.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;const e=this._getTipElement();if(e.classList.remove(en),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))ht.off(e,"mouseover",qe);this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this._isHovered=!1,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||e.remove(),this._element.removeAttribute("aria-describedby"),ht.trigger(this._element,this.constructor.eventName("hidden")),this._disposePopper())}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(Ji,en),t.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",i),this._isAnimated()&&t.classList.add(Ji),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new Qi({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._config.originalTitle}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Ji)}_isShown(){return this.tip&&this.tip.classList.contains(en)}_createPopper(e){const t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,i=rn[t.toUpperCase()];return Le(this._element,e,this._getPopperConfig(i))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)ht.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>this.toggle(e)));else if("manual"!==t){const e=t===sn?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=t===sn?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");ht.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?on:sn]=!0,t._enter()})),ht.on(this._element,i,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?on:sn]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},ht.on(this._element.closest(tn),nn,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const e=this._config.originalTitle;e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=vt.getDataAttributes(this._element);for(const e of Object.keys(t))Zi.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:$e(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e.originalTitle=this._element.getAttribute("title")||"","number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(e){return this.each((function(){const t=cn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ye(cn);const dn={...cn.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},un={...cn.DefaultType,content:"(null|string|element|function)"};class hn extends cn{static get Default(){return dn}static get DefaultType(){return un}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=hn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ye(hn);const pn="click.bs.scrollspy",fn="active",mn="[href]",gn={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null},_n={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element"};class vn extends yt{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return gn}static get DefaultType(){return _n}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=$e(e.target)||document.body,e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(ht.off(this._config.target,pn),ht.on(this._config.target,pn,mn,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const i=this._rootElement||window,n=t.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n,behavior:"smooth"});i.scrollTop=n}})))}_getNewObserver(){const e={root:this._rootElement,threshold:[.1,.5,1],rootMargin:this._getRootMargin()};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),i=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const o of e){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(o));continue}const e=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&e){if(i(o),!n)return}else s||e||i(o)}}_getRootMargin(){return this._config.offset?`${this._config.offset}px 0px -30%`:this._config.rootMargin}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=It.find(mn,this._config.target);for(const t of e){if(!t.hash||He(t))continue;const e=It.findOne(t.hash,this._element);je(e)&&(this._targetLinks.set(t.hash,t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(fn),this._activateParents(e),ht.trigger(this._element,"activate.bs.scrollspy",{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))It.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(fn);else for(const t of It.parents(e,".nav, .list-group"))for(const e of It.prev(t,".nav-link, .nav-item > .nav-link, .list-group-item"))e.classList.add(fn)}_clearActiveClass(e){e.classList.remove(fn);const t=It.find("[href].active",e);for(const e of t)e.classList.remove(fn)}static jQueryInterface(e){return this.each((function(){const t=vn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ht.on(window,"load.bs.scrollspy.data-api",(()=>{for(const e of It.find('[data-bs-spy="scroll"]'))vn.getOrCreateInstance(e)})),Ye(vn);const bn="ArrowLeft",yn="ArrowRight",wn="ArrowUp",Tn="ArrowDown",En="active",An="fade",In="show",Cn='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',On=`.nav-link:not(.dropdown-toggle), .list-group-item:not(.dropdown-toggle), [role="tab"]:not(.dropdown-toggle), ${Cn}`;class Pn extends yt{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),ht.on(this._element,"keydown.bs.tab",(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),i=t?ht.trigger(t,"hide.bs.tab",{relatedTarget:e}):null;ht.trigger(e,"show.bs.tab",{relatedTarget:t}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){e&&(e.classList.add(En),this._activate(De(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.focus(),e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),ht.trigger(e,"shown.bs.tab",{relatedTarget:t})):e.classList.add(In)}),e,e.classList.contains(An)))}_deactivate(e,t){e&&(e.classList.remove(En),e.blur(),this._deactivate(De(e)),this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),ht.trigger(e,"hidden.bs.tab",{relatedTarget:t})):e.classList.remove(In)}),e,e.classList.contains(An)))}_keydown(e){if(![bn,yn,wn,Tn].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=[yn,Tn].includes(e.key),i=Xe(this._getChildren().filter((e=>!He(e))),e.target,t,!0);i&&Pn.getOrCreateInstance(i).show()}_getChildren(){return It.find(On,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),i=this._getOuterElement(e);e.setAttribute("aria-selected",t),i!==e&&this._setAttributeIfNotExists(i,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=De(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,t){const i=this._getOuterElement(e);if(!i.classList.contains("dropdown"))return;const n=(e,n)=>{const s=It.findOne(e,i);s&&s.classList.toggle(n,t)};n(".dropdown-toggle",En),n(".dropdown-menu",In),n(".dropdown-item",En),i.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,i){e.hasAttribute(t)||e.setAttribute(t,i)}_elemIsActive(e){return e.classList.contains(En)}_getInnerElement(e){return e.matches(On)?e:It.findOne(On,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=Pn.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ht.on(document,"click.bs.tab",Cn,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),He(this)||Pn.getOrCreateInstance(this).show()})),ht.on(window,"load.bs.tab",(()=>{for(const e of It.find('.active[data-bs-toggle="tab"], .active[data-bs-toggle="pill"], .active[data-bs-toggle="list"]'))Pn.getOrCreateInstance(e)})),Ye(Pn);const xn="hide",Ln="show",Nn="showing",kn={animation:"boolean",autohide:"boolean",delay:"number"},Sn={animation:!0,autohide:!0,delay:5e3};class Fn extends yt{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Sn}static get DefaultType(){return kn}static get NAME(){return"toast"}show(){ht.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(xn),Ve(this._element),this._element.classList.add(Ln,Nn),this._queueCallback((()=>{this._element.classList.remove(Nn),ht.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(ht.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Nn),this._queueCallback((()=>{this._element.classList.add(xn),this._element.classList.remove(Nn,Ln),ht.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Ln),super.dispose()}isShown(){return this._element.classList.contains(Ln)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const i=e.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){ht.on(this._element,"mouseover.bs.toast",(e=>this._onInteraction(e,!0))),ht.on(this._element,"mouseout.bs.toast",(e=>this._onInteraction(e,!1))),ht.on(this._element,"focusin.bs.toast",(e=>this._onInteraction(e,!0))),ht.on(this._element,"focusout.bs.toast",(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Fn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}wt(Fn),Ye(Fn)},9:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateRangeValText=t.setErrorMessage=t.createPresetFormField=t.creteEnumPresetFormField=t.createRangePresetFormField=t.creteBoolPresetFormField=void 0;const n=i(154),s=i(48),o=i(435),r=i(277);function a(e,t,i=!1){return`<div class="form-check form-switch">\n<input class="form-check-input" type="checkbox" value="${e}" id="presetInput${t}" ${l(i)}></div>`}function l(e){return e?"disabled":""}function c(e,t,i,r=!1){if(e.type!==n.PresetFieldType.RANGE||void 0===e.options)return;const a=e.options;void 0===i?i=50:a.type===n.SliderType.LOGARITHMIC&&(i=(0,s.posFromLogarithmicValue)(i,a.low,a.high));let c="",d="";switch(a.type){case n.SliderType.LINEAR:c=(0,o.formatSIUnitNumber)(i,2,a.unit),d=`min=${a.low} max=${a.high}`;break;case n.SliderType.LOGARITHMIC:c=(0,o.formatSIUnitNumber)((0,s.logarithmicValueFromPos)(i,a.low,a.high),2,a.unit),d="min=0 max=100"}return`\n<div class="row form-text">\n<div class="col-4">Restrictive</div>\n<div class="col-4 text-center" id="rangeVal${t}">${c}</div>\n<div class="col-4 text-end">Permissive</div>\n</div>\n<input class="form-range" type="range" value="${i}" id="presetInput${t}" ${d} step=1 ${l(r)}\nonChange="ExaFS.updateRangeValText(this, ${t}, ${a.low}, ${a.high}, ${a.type}, '${a.unit}')" name="ddp_${e.name}"\nonInput="ExaFS.updateRangeValText(this, ${t}, ${a.low}, ${a.high}, ${a.type}, '${a.unit}')">`}function d(e,t,i,s=!1){if(e.type!==n.PresetFieldType.ENUM||void 0===e.options)return;let o=e.options,r="";if(o.multi){const n=null==i?void 0:i.split(",");for(const i of o.values)r+=`<div class="form-check form-check-inline">\n                      <input class="form-check-input" \n                          type="checkbox" \n                          name="ddp_${e.name}"\n                          id="${i}Check${t}" \n                          value="${i}"\n                          ${l(s)}\n                          ${(null==n?void 0:n.includes(i))?'checked="checked"':""}>\n                      <label class="form-check-label" for="${i}Check${t}">${i}</label>\n                    </div>`;return`<div class="form-check form-check-inline" id="presetInput${t}">${r}</div>`}for(const e of o.values)r+=`<option value=${e} ${e===i?"selected":""}>${e}</option>`;return`<select class="form-select" id="presetInput${t}" ${l(s)} name="ddp_${e.name}">${r}</select>`}t.creteBoolPresetFormField=a,t.createRangePresetFormField=c,t.creteEnumPresetFormField=d,t.createPresetFormField=function(e,t,i,s=!1){let o='<div class="fade-in-fwd">';void 0===i&&(i=e.defaultValue);const r=e.validators?`onInput="ExaFS.validateField('${e.name}', this, ${t})"`:"";switch(e.type){case n.PresetFieldType.TEXT:o+=`<input class="form-control" ${r} name="ddp_${e.name}" type="text" value="${i}" id="presetInput${t}" ${l(s)}>`;break;case n.PresetFieldType.NUMBER:o+=`<input class="form-control" ${r} type="number" name="ddp_${e.name}" value="${i}" id="presetInput${t}" ${l(s)}>`;break;case n.PresetFieldType.RANGE:o+=c(e,t,i,s);break;case n.PresetFieldType.BOOL:o+=a(i,t,s);break;case n.PresetFieldType.ENUM:o+=d(e,t,i,s)}return o+=`<p class="form-text text-danger" id="form-value-error-msg${t}"></p>`,e.description&&(o+=`<div class="form-text">${e.description}</div>`),o+="</div>",o},t.setErrorMessage=function(e,t){const i=document.getElementById("form-value-error-msg"+e);i&&(i.innerHTML=t)},t.updateRangeValText=function(e,t,i,a,l,c=""){const d=document.getElementById("rangeVal"+t);d&&(l===n.SliderType.LINEAR?d.innerText=(0,o.formatSIUnitNumber)(e.valueAsNumber,2,c):l===n.SliderType.LOGARITHMIC&&(d.innerText=(0,o.formatSIUnitNumber)((0,s.logarithmicValueFromPos)(e.valueAsNumber,i,a),2,c)),(0,r.validateField)(e.name.slice(4),e,t))}},300:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DDPPresetEditForm=void 0;const n=i(154),s=i(9),o=i(505),r=i(48),a=i(562);class l{constructor(e,t,i,s){this.changes=!1,this._maxId=0,this._ruleType=n.DDPRuleType.FILTER,this._activeFields=[],this._availableFields=[],this.containerId=e,this.ruleTypeSelect=document.getElementById(t),this.presetNameInput=document.getElementById(i),this.varName=s,this.onRuleTypeChange()}initFromPreset(e){this.ruleTypeSelect.value=e.fields.rule_type,this.onRuleTypeChange(),Object.entries(e.fields).forEach((([t,i],n)=>{if("rule_type"!==t){const n=this.addField(t,i);-1!==n&&(document.getElementById(`userEditable${n}`).checked=e.editable.includes(t))}})),this.checkFieldRequirements()}addField(e,t){let i=Object.assign({},(0,n.getPresetField)(e));if(i){this.changes=!0;const n=(0,s.createPresetFormField)(i,this._maxId,t,!1),r=this._wrapField(n,this._maxId,e);return i.formId=this._maxId,this._activeFields.push(i),this._maxId++,(0,o.createChild)(r,this.containerId),this.checkForDuplicates(i.formId,e),i.formId}return-1}removeField(e){var t;const i=document.getElementById(`fieldContainer${e}`);if(i){this.changes=!0,null===(t=i.parentElement)||void 0===t||t.removeChild(i);const n=this._activeFields.findIndex((t=>t.formId===e));-1!==n&&(this._clearInvalidDuplicateWarnings(e,this._activeFields[n].name),this._activeFields.splice(n,1))}}updatePresetInputField(e,t){const i=this._getFieldIndexById(t),o=this._activeFields[i].name,r=Object.assign({},(0,n.getPresetField)(e.value)),a=document.getElementById(`fieldValueContainer${t}`);this._removeInvalidSelectOptions(e,t),this._clearInvalidDuplicateWarnings(t,o),r?(this.changes=!0,r.formId=t,a&&(a.innerHTML=(0,s.createPresetFormField)(r,t)),-1!==i&&(this._activeFields[i]=r),this.checkForDuplicates(t,e.value)):a&&(a.innerHTML='<p class="text-danger">Invalid rule field name!</p>')}save(e,t,i,n){if(this.checkFieldRequirements(),l._formHasErrors())return void alert("Preset has errors! Fix them before saving.");this.changes=!1;let s=new FormData;const o=this._getPresetName();if(null===o)return;s.append("name",o),s.append("rule_type",this._ruleType.toString()),s.append("csrf_token",e);const r=this._collectFormData(s);s.append("editable",r);let c="",d=null;n&&(d=document.getElementById(n)),d&&(c=d.innerHTML,d.setAttribute("disabled",""),d.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...'),(0,a.sendFormDataToBackend)(s,t,a.HTTP_METHOD.POST).then((e=>{this._handleSaveResponse(e,i,d)})).catch((e=>{console.error(e),d&&(d.innerHTML=c,d.removeAttribute("disabled")),alert("Could not save preset: "+e)}))}onRuleTypeChange(){this._ruleType=this.ruleTypeSelect.value,this._availableFields=(0,n.getPresetFieldsByRuleType)(this._ruleType),this._rebuildAttributeSelectDropdowns()}onPresetNameChange(){const e=document.getElementById("presetNameError");this.changes=!0,""!==this.presetNameInput.value?(e&&(e.innerText=""),this.presetNameInput.classList.remove("is-invalid")):(e&&(e.innerText="Preset name is required"),this.presetNameInput.classList.add("is-invalid"))}setKeyErrorMessage(e,t){const i=document.getElementById("form-error-msg"+e),n=document.getElementById("fieldSelect"+e);i&&n&&(i.innerText=t,""==t?n.classList.remove("is-invalid"):n.classList.add("is-invalid"))}checkForDuplicates(e,t){const i=this._findDuplicateKeys(e,t);if(i.length>0){for(const e of i)void 0!==e.formId&&this._setFieldAsDuplicate(e.formId);this._setFieldAsDuplicate(e)}}checkFieldRequirements(){for(const e of this._activeFields)if(e.requires_fields&&void 0!==e.formId){const t=this._findUnsatisfiedRequirements(e);if(0!==t.length){let i="";for(let e of t)i+=", "+e;i=i.slice(2),this.setKeyErrorMessage(e.formId,"Requirements not satisfied: "+i)}else this.setKeyErrorMessage(e.formId,"")}}_rebuildAttributeSelectDropdowns(){for(let e=0;e<this._maxId;e++){const t=document.getElementById("fieldSelect"+e);if(t){t.classList.remove("is-invalid");let i="";this._fieldExistsInCache(t)?this.setKeyErrorMessage(e,""):(i=`<option value=${t.value} selected invalid>${t.options[t.selectedIndex].text}</option>`,t.classList.add("is-invalid"),this.setKeyErrorMessage(e,"Invalid field for selected rule type")),t.innerHTML=this._createFieldSelectionDropdownOptions(t.value)+i}}}_fieldExistsInCache(e){return!!this._availableFields.find((t=>t.name===e.value))}_wrapField(e,t,i){return`<div id="fieldContainer${t}">\n        <hr class="d-md-none my-2">\n        <div class="row my-3 fade-in-fwd">\n            <div class="col-sm-12 col-md-4 my-1">\n            <select class="form-select" id="fieldSelect${t}" onChange="${this.varName}.updatePresetInputField(this, ${t})">\n                ${this._createFieldSelectionDropdownOptions(i)}\n        </select>\n        <p class="form-text text-danger" id="form-error-msg${t}"></p>\n        </div>\n        <div class="col-sm-12 col-md-4 my-1" id="fieldValueContainer${t}">\n            ${e}\n        </div>\n        <div class="col-sm-12 col-md-4 my-1">\n        <div class="form-check form-switch form-check-inline">\n          <input class="form-check-input" type="checkbox" id="userEditable${t}">\n          <label class="form-check-label" for="userEditable${t}">User can edit</label>\n        </div>\n        <button class="btn btn-outline-danger mx-2" role="button" onclick="${this.varName}.removeField(${t})" title="Remove line"><i class="bi bi-x-lg"></i></button>\n        </div>\n        </div>\n        </div>`}_createFieldSelectionDropdownOptions(e){let t="";for(const i of this._availableFields)t+=`<option value="${i.name}" ${i.name===e?"selected":""}>${i.printName}</option>`;return t}_getPresetName(){if(!this.presetNameInput)return null;if(!this.presetNameInput.value||""===this.presetNameInput.value){window.scrollTo({top:0,behavior:"smooth"}),this.presetNameInput.classList.add("is-invalid"),this.presetNameInput.focus();const e=document.getElementById("presetNameError");return e&&(e.innerText="Preset name is required."),null}return this.presetNameInput.value}_getFieldIndexById(e){return this._activeFields.findIndex((t=>t.formId===e))}_removeInvalidSelectOptions(e,t){let i=e.children;for(let t=0;t<i.length;t++)i[t].hasAttribute("invalid")&&e.removeChild(i[t]);this.setKeyErrorMessage(t,""),e.classList.remove("is-invalid")}_findDuplicateKeys(e,t){return this._activeFields.filter((i=>i.name===t&&i.formId!==e))}_setFieldAsDuplicate(e){const t=document.getElementById("fieldSelect"+e);null==t||t.classList.add("is-invalid"),this.setKeyErrorMessage(e,"Duplicate rule field")}_clearInvalidDuplicateWarnings(e,t){const i=this._findDuplicateKeys(e,t);if(1===i.length&&void 0!==i[0].formId){const e=document.getElementById("fieldSelect"+i[0].formId);null==e||e.classList.remove("is-invalid"),this.setKeyErrorMessage(i[0].formId,"")}}_findUnsatisfiedRequirements(e){let t=[];const i=document.getElementById("presetInput"+(null==e?void 0:e.formId));if(e.requires_fields)for(const s of e.requires_fields)if(s.rule_types.includes(this._ruleType)){const e=this._activeFields.findIndex((e=>e.name==s.name));if(-1==e)s.relationship==n.PresetFieldRequirementRelationship.IsSet&&t.push(s.name+" has to be set");else{const n=document.getElementById("presetInput"+this._activeFields[e].formId);if(n&&i){const e=l._handleRequirement(n,s,i);null!==e&&t.push(e)}}}return t}static _handleRequirement(e,t,i){const s=e.value;switch(t.relationship){case n.PresetFieldRequirementRelationship.IsNotSet:return t.name+" can not be set with this field";case n.PresetFieldRequirementRelationship.IsGreater:if(s<=i.value)return t.name+" has to be greater than this field";break;case n.PresetFieldRequirementRelationship.IsLower:if(s>=i.value)return t.name+" has to be lower than this field";break;case n.PresetFieldRequirementRelationship.IsGreaterOrEqual:if(s<i.value)return t.name+" has to be greater or equal to this field";break;case n.PresetFieldRequirementRelationship.IsLowerOrEqual:if(s>i.value)return t.name+" has to be lower or equal to this field";break;case n.PresetFieldRequirementRelationship.IsEqual:if(s!=i.value)return t.name+" has to be equal to this field";break;case n.PresetFieldRequirementRelationship.IsNotEqual:if(s==i.value)return t.name+" has to be different from this field"}return null}static _formHasErrors(){return document.querySelectorAll(".is-invalid").length>0}_collectFormData(e){let t="";for(let i of this._activeFields){const s=document.getElementById(`presetInput${i.formId}`),o=document.getElementById(`fieldSelect${i.formId}`),a=document.getElementById(`userEditable${i.formId}`);if(s&&o&&a)if(a.checked&&(t+=o.value+";"),s.hasChildNodes()&&"select"!==s.tagName.toLowerCase())e.append(o.value,l._checkboxesToStr(s));else{let t=s;if(i.type===n.PresetFieldType.RANGE&&i.options){const s=i.options;let a=t.valueAsNumber;s.type===n.SliderType.LOGARITHMIC&&(a=(0,r.logarithmicValueFromPos)(t.valueAsNumber,s.low,s.high)),e.append(o.value,a.toString())}else e.append(o.value,t.value.toString())}}return t}static _checkboxesToStr(e){let t="";for(let i of e.children)for(let e of i.children)if("input"===e.tagName.toLowerCase()&&"checkbox"===e.getAttribute("type")){const i=e;i.checked&&(t+=i.value+",")}return t}_handleSaveResponse(e,t,i){200==e.status||201==e.status?(i&&(i.innerHTML="Saved",i.removeAttribute("disabled")),window.location.href=t):e.text().then((t=>{alert("Server returned error status "+e.status+". Check the console for more details"),console.error(t),i&&(i.innerHTML="Errored",i.removeAttribute("disabled"))}))}}t.DDPPresetEditForm=l},557:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.changeAdvancedOptionsText=t.beforeIPFormSend=t.DDPPresetSelectForm=void 0;const n=i(154),s=i(505),o=i(9),r=i(48);class a{constructor(e){this.parentId=e}setPreset(e,t){this._preset=e,this.renderForm(t)}renderForm(e){if((0,s.clearAllChildren)(this.parentId),this._preset){const t=this._presetToHtml(e);(0,s.createChild)(t,this.parentId)}}_presetToHtml(e){if(!this._preset)return"";const t={defaultValue:this._preset.fields.rule_type,name:"rule_type",printName:"Rule type",type:n.PresetFieldType.TEXT,rule_types:[n.DDPRuleType.AMPLIFICATION,n.DDPRuleType.FILTER,n.DDPRuleType.SYN_DROP,n.DDPRuleType.TCP_AUTHENTICATOR]},i=(0,o.createPresetFormField)(t,0,this._preset.fields.rule_type,!0);let s=a._wrapField(i,0,t.printName),r=1;return Object.entries(this._preset.fields).forEach((([t,i],l)=>{if("rule_type"!==t&&void 0!==this._preset){let l=Object.assign({},(0,n.getPresetField)(t));e&&"ddp_"+t in e&&(i=e["ddp_"+t]);const c=(0,o.createPresetFormField)(l,r,i,!a._isEditable(t,this._preset.editable));s+="\n"+a._wrapField(c,r,l.printName),r++}})),s+='<hr class="my-2>',s}static _wrapField(e,t,i){return`\n    <div class="row">\n        <div class="my-3 col-md-6 col-sm-12 px-3">\n            <label for="presetInput${t}" class="form-label">${i}</label>\n                ${e}\n            <p class="form-text text-danger" id="form-error-msg${t}"></p>\n        </div>\n    </div>`}static _isEditable(e,t){return t.includes(e)}}t.DDPPresetSelectForm=a,t.beforeIPFormSend=function(e){const t=new FormData(e);if("4"!==t.get("action"))return!0;const i=(0,n.getFieldsByType)(n.PresetFieldType.RANGE);for(const o of i){const i=t.get("ddp_"+o.name);if(null!==i){const t=o.options,a=document.querySelector(`[name="${"ddp_"+o.name}"]`);if(a&&(0,s.removeElement)(a),t.type===n.SliderType.LOGARITHMIC){const n=`<input type="hidden" value="${(0,r.logarithmicValueFromPos)(+i,t.low,t.high)}" name="${"ddp_"+o.name}">`;(0,s.attachHtmlToRef)((0,s.stringToHtml)(n),e)}else{const t=`<input type="hidden" value="${i}" name="${"ddp_"+o.name}">`;(0,s.attachHtmlToRef)((0,s.stringToHtml)(t),e)}}}return!0},t.changeAdvancedOptionsText=function(e,t){const i=document.getElementById(e);i&&(i.innerHTML=t?'Hide advanced options <i class="bi bi-caret-up-fill"></i>':'Show advanced options <i class="bi bi-caret-down-fill"></i>')}},154:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getFieldsByType=t.showPresetModal=t.getValidatorsByAttribute=t.getPresetFieldsByRuleType=t.getPresetField=t.AVAILABLE_PRESET_FIELDS=t.PresetFieldRequirementRelationship=t.PresetFieldType=t.DDPRuleType=t.SliderType=void 0;const n=i(277),s=i(435),o=i(169);var r,a,l,c;function d(e){return t.AVAILABLE_PRESET_FIELDS.find((t=>t.name===e))}!function(e){e[e.LINEAR=0]="LINEAR",e[e.LOGARITHMIC=1]="LOGARITHMIC"}(r=t.SliderType||(t.SliderType={})),function(e){e.AMPLIFICATION="amplification",e.SYN_DROP="syn_drop",e.FILTER="filter",e.TCP_AUTHENTICATOR="tcp_authenticator"}(a=t.DDPRuleType||(t.DDPRuleType={})),function(e){e.TEXT="text",e.NUMBER="number",e.RANGE="range",e.BOOL="bool",e.ENUM="enum"}(l=t.PresetFieldType||(t.PresetFieldType={})),function(e){e[e.IsSet=0]="IsSet",e[e.IsNotSet=1]="IsNotSet",e[e.IsGreater=2]="IsGreater",e[e.IsLower=3]="IsLower",e[e.IsGreaterOrEqual=4]="IsGreaterOrEqual",e[e.IsLowerOrEqual=5]="IsLowerOrEqual",e[e.IsEqual=6]="IsEqual",e[e.IsNotEqual=7]="IsNotEqual"}(c=t.PresetFieldRequirementRelationship||(t.PresetFieldRequirementRelationship={})),t.AVAILABLE_PRESET_FIELDS=[{name:"threshold_bps",printName:"Threshold [bits/s]",type:l.RANGE,defaultValue:0,description:"Activate rule when traffic reaches the given threshold defined by bits per second. Bits per second are calculated on L2 without Ethernet FCS field (4B).",options:{low:1e8,high:1e11,unit:"b/s",type:r.LOGARITHMIC},rule_types:[a.AMPLIFICATION,a.FILTER,a.SYN_DROP,a.TCP_AUTHENTICATOR],requires_fields:[{name:"limit_bps",relationship:c.IsLowerOrEqual,rule_types:[a.AMPLIFICATION]},{name:"limit_bps",relationship:c.IsSet,rule_types:[a.AMPLIFICATION]}]},{name:"threshold_pps",printName:"Threshold [packets/s]",type:l.RANGE,defaultValue:0,description:"Activate rule when traffic reaches the given threshold defined by packets per second.",options:{low:1e4,high:1e9,unit:" packet/s",type:r.LOGARITHMIC},rule_types:[a.AMPLIFICATION,a.FILTER,a.SYN_DROP,a.TCP_AUTHENTICATOR],requires_fields:[{name:"limit_pps",relationship:c.IsLowerOrEqual,rule_types:[a.AMPLIFICATION]},{name:"limit_pps",relationship:c.IsSet,rule_types:[a.AMPLIFICATION]}]},{name:"protocol",printName:"Protocol",type:l.ENUM,defaultValue:"",description:"List of L4 protocols. If not set, apply to all.",rule_types:[a.FILTER,a.AMPLIFICATION],options:{values:["TCP","UDP","ICMP","SCTP"],multi:!0}},{name:"tcp_flags",printName:"TCP Flags",type:l.TEXT,defaultValue:"",description:"List of TCP flags combinations. Combinations can be created using following values:<ul><li>C: Congestion window reduced,</li><li>E: ECN-Echo,</li><li>U: Urgent,</li><li>A: Acknowledge,</li><li>P: Push,</li><li>R: Reset,</li><li>S: Synchronize,</li><li>F: Finalize.</li></ul>Using these a packet is accepted only if the corresponding flag is set. If a letter is negated using ‘!’ a packet is accepted only if the corresponding flag is not set. Otherwise a value of a flag does not matter.<br>Example for SYN and SYN+ACK packets only: !C!E!U!P!RS!F",rule_types:[a.AMPLIFICATION],validators:[new n.RegexPatternValidator(/^(?!.*?([CEUAPRSF]).*\1)(!?[CEUAPRSF]){1,8}$/gm,"TCP Flags","value can only contain letters C, E, U, A, P, R, S and F, optionally prefixed by exclamation mark (!C), each letter only once. Check the description for an example.")]},{name:"vlan",printName:"VLAN ID",type:l.NUMBER,defaultValue:0,description:"VLAN ID. If zero, match only packets without VLAN ID.",rule_types:[a.AMPLIFICATION,a.FILTER,a.SYN_DROP,a.TCP_AUTHENTICATOR]},{name:"threshold_syn_soft",printName:"Soft SYN threshold",type:l.RANGE,defaultValue:5,description:"Number of SYN-only packets (per client) that are allowed without receiving any ACK-only packet.",options:{low:2,high:10,unit:"packets",type:r.LINEAR},rule_types:[a.SYN_DROP]},{name:"threshold_syn_hard",printName:"Hard SYN threshold",type:l.RANGE,defaultValue:20,description:"Number of packets (per client) after which all consequent SYN-only packets are dropped regardless of received ACK packets.",options:{low:2,high:100,unit:"packets",type:r.LINEAR},rule_types:[a.SYN_DROP,a.TCP_AUTHENTICATOR]},{name:"limit_bps",printName:"Limit [bits/s]",defaultValue:0,description:"Traffic volume defined as bits per second. Defines how much traffic will be allowed to the protected network during an attack. Traffic from N biggest contributors is blocked until traffic volume is limited to or below this target value. Bits per second are calculated on L2 without Ethernet FCS field (4B). A limit value has to be lower or equal to corresponding threshold value.",rule_types:[a.AMPLIFICATION],type:l.RANGE,options:{low:1e8,high:1e11,unit:"b/s",type:r.LOGARITHMIC},validators:[new n.NonZeroValidator],requires_fields:[{name:"threshold_bps",relationship:c.IsGreaterOrEqual,rule_types:[a.AMPLIFICATION]},{name:"threshold_bps",relationship:c.IsSet,rule_types:[a.AMPLIFICATION]}]},{name:"limit_pps",printName:"Limit [packets/s]",defaultValue:1e6,description:"Traffic volume amount defined as packets per second. Says how much traffic will be limited during an attack. N biggest contributors are blocked until traffic volume is limited to this value.",rule_types:[a.AMPLIFICATION],type:l.RANGE,options:{low:1e4,high:1e9,unit:" packet/s",type:r.LOGARITHMIC},validators:[new n.NonZeroValidator],requires_fields:[{name:"threshold_pps",relationship:c.IsGreaterOrEqual,rule_types:[a.AMPLIFICATION]},{name:"threshold_pps",relationship:c.IsSet,rule_types:[a.AMPLIFICATION]}]},{name:"fragmentation",printName:"Fragmentation",type:l.ENUM,defaultValue:"ANY",description:"Specification of packets from the fragmentation point of view.",rule_types:[a.AMPLIFICATION],options:{values:["ANY","NO","YES","FIRST","LAST","MIDDLE","NOFIRST"],multi:!1}},{name:"packet_lengths",printName:"Packet lengths [B]",defaultValue:"",description:"List of packet lengths and packet lengths ranges. Only packets of matching length are considered. If empty, packets of any length are considered. L2 packet length without FCS field (4B) is considered. Possible values: x;&gt;x;x-y;&lt;x;&lt;=x;&gt;=x",type:l.TEXT,rule_types:[a.AMPLIFICATION]},{name:"validity_timeout",printName:"Validity timeout",rule_types:[a.TCP_AUTHENTICATOR],type:l.RANGE,defaultValue:1,description:"Maximum validity interval of host (i.e. source IP address) authentication. If a host tries to establish another TCP connection after the timeout has elapsed, it must be authenticated again.",options:{low:1,high:600,unit:"s",type:r.LINEAR}},{name:"algorithm_type",printName:"Algorithm type",type:l.ENUM,defaultValue:"RST_COOKIES",description:"Type of algorithm to be used for mitigation:<ul><li>RST_COOKIES: Reset Cookies algorithm,</li><li>SYN_AUTH: SYN Authentication algorith</li></ul>",rule_types:[a.TCP_AUTHENTICATOR],options:{values:["RST_COOKIES","SYN_AUTH"],multi:!1}},{name:"table_exponent",printName:"Table exponent",type:l.NUMBER,defaultValue:18,description:"Size exponent (i.e. 2^x) of the record table. It corresponds to maximum number of unique source IP addresses.",rule_types:[a.SYN_DROP,a.AMPLIFICATION,a.TCP_AUTHENTICATOR],validators:[new n.NumberRangeValidator(10,30)]}],t.getPresetField=d,t.getPresetFieldsByRuleType=function(e){return t.AVAILABLE_PRESET_FIELDS.filter((t=>{var i;return null===(i=t.rule_types)||void 0===i?void 0:i.includes(e)}))},t.getValidatorsByAttribute=function(e){const t=d(e);return t&&t.validators?t.validators:[]},t.showPresetModal=function(e,t,i){const n=document.getElementById("presetDetailTitle"),r=document.getElementById("presetDetailBody"),a=document.getElementById("presetDetailModal");if(n&&r&&a){n.innerHTML=e,r.innerHTML="";for(let e in t){let n=r.insertRow(r.rows.length),o=n.insertCell(),a=n.insertCell(),l=n.insertCell();o.innerHTML=e,"number"==typeof t[e]?a.innerHTML=(0,s.formatSIUnitNumber)(t[e],2,""):a.innerHTML=t[e].toString(),l.innerHTML=i.includes(e)?"Yes":"No"}new o.Modal(a,{backdrop:!0,keyboard:!0}).show()}},t.getFieldsByType=function(e){return t.AVAILABLE_PRESET_FIELDS.filter((t=>t.type===e))}},277:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateField=t.NonZeroValidator=t.RegexPatternValidator=t.NumberRangeValidator=void 0;const n=i(154),s=i(9);t.NumberRangeValidator=class{constructor(e,t){this.options={min:e,max:t}}validate(e){let t=!0;return void 0!==this.options.min&&e<=this.options.min&&(t=!1),void 0!==this.options.max&&e>=this.options.max&&(t=!1),t}invalidMessage(){return`Value has to be in range ${this.options.min} - ${this.options.max}`}},t.RegexPatternValidator=class{constructor(e,t,i){this.options={regex:e,name:t,hint:i}}validate(e){return new RegExp(this.options.regex).test(e)}invalidMessage(){let e="Invalid format";return this.options.name&&(e+=" for "+this.options.name),this.options.hint&&(e+=" - "+this.options.hint),e}},t.NonZeroValidator=class{validate(e){return 0!=+e}invalidMessage(){return"This field can not be zero."}},t.validateField=function(e,t,i){const o=(0,n.getValidatorsByAttribute)(e);if(o.length>0){let e="",n=!0;for(let i of o)i.validate(t.value)||(n=!1,e+=i.invalidMessage()+"<br>");(0,s.setErrorMessage)(i,e),n?t.classList.remove("is-invalid"):t.classList.add("is-invalid")}}},330:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.showFieldIf=void 0,t.showFieldIf=function(e,t,i){const n=document.getElementById(i);e!=t?null==n||n.classList.add("d-none"):null==n||n.classList.remove("d-none")}},562:(e,t)=>{var i;Object.defineProperty(t,"__esModule",{value:!0}),t.sendFormDataToBackend=t.HTTP_METHOD=void 0,(i=t.HTTP_METHOD||(t.HTTP_METHOD={})).GET="GET",i.POST="POST",i.PUT="PUT",i.DELETE="DELETE",i.PATCH="PATCH",t.sendFormDataToBackend=function(e,t,i){const n={method:i.toString(),body:e};return fetch(t,n)}},48:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.posFromLogarithmicValue=t.logarithmicValueFromPos=void 0,t.logarithmicValueFromPos=function(e,t,i){if(e<=0)return 0;const n=Math.log(Math.max(t,1)),s=(Math.log(i)-n)/100;return Math.round(Math.exp(e*s+n))},t.posFromLogarithmicValue=function(e,t,i){if(e<=0)return 0;const n=Math.log(Math.max(t,1)),s=(Math.log(i)-n)/100;return Math.round((Math.log(e)-n)/s)}},505:(e,t)=>{function i(e){return(new DOMParser).parseFromString(e,"text/html").body.children}function n(e,t){if(e instanceof HTMLElement)t.appendChild(e);else if(e instanceof HTMLCollection){let i=Array.from(e);for(let e=0;e<i.length;e++){const n=i[e];t.appendChild(n)}}}function s(e,t){const i=document.getElementById(t);i&&n(e,i)}Object.defineProperty(t,"__esModule",{value:!0}),t.removeElement=t.clearAllChildren=t.createChild=t.attachHtmlTo=t.attachHtmlToRef=t.stringToHtml=void 0,t.stringToHtml=i,t.attachHtmlToRef=n,t.attachHtmlTo=s,t.createChild=function(e,t){s(i(e),t)},t.clearAllChildren=function(e){const t=document.getElementById(e);t&&(t.innerHTML="")},t.removeElement=function(e){var t;null===(t=e.parentElement)||void 0===t||t.removeChild(e)}},435:(e,t)=>{function i(e,t){const i=Math.pow(10,t||0);return Math.round(e*i)/i}Object.defineProperty(t,"__esModule",{value:!0}),t.formatSIUnitNumber=void 0,t.formatSIUnitNumber=function(e,t,n=""){return e>=1e12?i(e/1e12,t).toString()+" T"+n:e>=1e9?i(e/1e9,t).toString()+" G"+n:e>=1e6?i(e/1e6,t).toString()+" M"+n:e>=1e3?i(e/1e3,t).toString()+" k"+n:i(e,t).toString()+" "+n}}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,i),o.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.showFieldIf=e.updateRangeValText=e.validateField=e.beforeIPFormSend=e.changeAdvancedOptionsText=e.DDPPresetSelectForm=e.DDPPresetEditForm=e.showPresetModal=void 0;const t=i(169);window.onload=function(){[].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map((function(e){return new t.Tooltip(e)}))};var s=i(154);Object.defineProperty(e,"showPresetModal",{enumerable:!0,get:function(){return s.showPresetModal}});var o=i(300);Object.defineProperty(e,"DDPPresetEditForm",{enumerable:!0,get:function(){return o.DDPPresetEditForm}});var r=i(557);Object.defineProperty(e,"DDPPresetSelectForm",{enumerable:!0,get:function(){return r.DDPPresetSelectForm}}),Object.defineProperty(e,"changeAdvancedOptionsText",{enumerable:!0,get:function(){return r.changeAdvancedOptionsText}}),Object.defineProperty(e,"beforeIPFormSend",{enumerable:!0,get:function(){return r.beforeIPFormSend}});var a=i(277);Object.defineProperty(e,"validateField",{enumerable:!0,get:function(){return a.validateField}});var l=i(9);Object.defineProperty(e,"updateRangeValText",{enumerable:!0,get:function(){return l.updateRangeValText}});var c=i(330);Object.defineProperty(e,"showFieldIf",{enumerable:!0,get:function(){return c.showFieldIf}})})(),ExaFS=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,